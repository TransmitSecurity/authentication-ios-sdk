// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TSAuthenticationSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AuthenticationServices
import Foundation
import Swift
import SystemConfiguration
@_exported import TSAuthenticationSDK
import TSCoreSDK
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public typealias TSAuthenticationCompletion = ((Swift.Result<TSAuthenticationSDK.TSAuthenticationResult, TSAuthenticationSDK.TSAuthenticationError>) -> ())?
public typealias TSRegistrationCompletion = ((Swift.Result<TSAuthenticationSDK.TSRegistrationResult, TSAuthenticationSDK.TSAuthenticationError>) -> ())?
public typealias TSNativeBiometricsRegistrationCompletion = (Swift.Result<TSAuthenticationSDK.TSNativeBiometricsRegistrationResult, TSAuthenticationSDK.TSAuthenticationError>) -> ()
public typealias TSNativeBiometricsAuthenticationCompletion = (Swift.Result<TSAuthenticationSDK.TSNativeBiometricsAuthenticationResult, TSAuthenticationSDK.TSAuthenticationError>) -> ()
public typealias DeviceInfoCompletion = (Swift.Result<TSAuthenticationSDK.TSDeviceInfo, TSAuthenticationSDK.TSAuthenticationError>) -> Swift.Void
public enum TSPasscodeError : Swift.String {
  case unknown
  case canceled
  case invalidResponse
  case notHandled
  case failed
  case notInteractive
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TSAuthenticationError : Swift.Error, Swift.Equatable {
  case notInitialized
  case invalidDomain
  case userNotFound
  case requestIsRunning
  case registrationFailed
  case authenticationFailed
  case invalidWebAuthnSession
  case genericServerError
  case networkError
  case passkeyError(TSAuthenticationSDK.TSPasscodeError)
  case unknown
  public static func == (a: TSAuthenticationSDK.TSAuthenticationError, b: TSAuthenticationSDK.TSAuthenticationError) -> Swift.Bool
}
public struct TSDeviceInfo : Swift.Codable {
  public let publicKeyId: Swift.String
  public let publicKey: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc final public class TSConfiguration : ObjectiveC.NSObject {
  final public var domain: Swift.String {
    get
  }
  public init(domain: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TSAuthentication : ObjectiveC.NSObject {
  public static let shared: TSAuthenticationSDK.TSAuthentication
  final public func initialize(baseUrl: Swift.String = "https://api.transmitsecurity.io/", clientId: Swift.String, configuration: TSAuthenticationSDK.TSConfiguration? = nil)
  final public func register(username: Swift.String, displayName: Swift.String?, completion: TSAuthenticationSDK.TSRegistrationCompletion)
  final public func authenticate(username: Swift.String, completion: TSAuthenticationSDK.TSAuthenticationCompletion = nil)
  final public func signTransaction(username: Swift.String, completion: TSAuthenticationSDK.TSAuthenticationCompletion = nil)
  final public func getDeviceInfo(_ completion: @escaping TSAuthenticationSDK.DeviceInfoCompletion)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TSRegistrationResult {
  final public var result: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TSNativeBiometricsRegistrationResult {
  final public let publicKey: Swift.String
  final public let publicKeyId: Swift.String
  final public let attestation: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TSAuthenticationResult {
  final public var result: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TSNativeBiometricsAuthenticationResult {
  final public let publicKeyId: Swift.String
  final public let signature: Swift.String
  @objc deinit
}
extension TSAuthenticationSDK.TSAuthentication {
  final public var version: Swift.String? {
    get
  }
  final public var buildNumber: Swift.String? {
    get
  }
}
extension TSAuthenticationSDK.TSPasscodeError : Swift.Equatable {}
extension TSAuthenticationSDK.TSPasscodeError : Swift.Hashable {}
extension TSAuthenticationSDK.TSPasscodeError : Swift.RawRepresentable {}
