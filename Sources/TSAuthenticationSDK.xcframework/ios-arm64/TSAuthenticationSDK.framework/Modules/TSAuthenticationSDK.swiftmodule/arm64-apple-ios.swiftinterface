// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TSAuthenticationSDK
import AuthenticationServices
import CryptoKit
import Foundation
import LocalAuthentication
import Swift
import SystemConfiguration
@_exported import TSAuthenticationSDK
import TSCoreSDK
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public typealias TSAuthenticationCompletion = (Swift.Result<TSAuthenticationSDK.TSAuthenticationResult, TSAuthenticationSDK.TSAuthenticationError>) -> ()
public typealias TSRegistrationCompletion = (Swift.Result<TSAuthenticationSDK.TSRegistrationResult, TSAuthenticationSDK.TSAuthenticationError>) -> ()
public typealias TSNativeBiometricsRegistrationCompletion = (Swift.Result<TSAuthenticationSDK.TSNativeBiometricsRegistrationResult, TSAuthenticationSDK.TSAuthenticationError>) -> ()
public typealias TSNativeBiometricsAuthenticationCompletion = (Swift.Result<TSAuthenticationSDK.TSNativeBiometricsAuthenticationResult, TSAuthenticationSDK.TSAuthenticationError>) -> ()
public typealias TSNativeBiometricsUnregisterCompletion = (Swift.Result<TSAuthenticationSDK.TSNativeBiometricsUnregisterResult, TSAuthenticationSDK.TSAuthenticationError>) -> ()
public typealias DeviceInfoCompletion = (Swift.Result<TSAuthenticationSDK.TSDeviceInfo, TSAuthenticationSDK.TSAuthenticationError>) -> Swift.Void
public typealias TSTOTPRegistrationCompletion = (Swift.Result<TSAuthenticationSDK.TSTOTPRegistrationResult, TSAuthenticationSDK.TSAuthenticationError>) -> ()
public typealias TSTOTPGenerateCodeCompletion = (Swift.Result<TSAuthenticationSDK.TSTOTPGenerateCodeResult, TSAuthenticationSDK.TSAuthenticationError>) -> ()
public typealias TSApprovalCompletion = (Swift.Result<TSAuthenticationSDK.TSAuthenticationResult, TSAuthenticationSDK.TSAuthenticationError>) -> ()
public struct TSAuthenticationConfiguration {
  public init(configurationFileName: Swift.String)
}
public enum TSTOTPSecurityType : Swift.Codable {
  case biometric
  case none
  public static func == (a: TSAuthenticationSDK.TSTOTPSecurityType, b: TSAuthenticationSDK.TSTOTPSecurityType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TSDeviceInfo : Swift.Codable {
  public let publicKeyId: Swift.String
  public let publicKey: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TSAuthentication : ObjectiveC.NSObject, TSCoreSDK.TSLogConfigurable {
  public static let shared: TSAuthenticationSDK.TSAuthentication
  final public func initialize(baseUrl: Swift.String = "https://api.transmitsecurity.io/", clientId: Swift.String, domain: Swift.String? = nil)
  final public func initializeSDK(configuration: TSAuthenticationSDK.TSAuthenticationConfiguration? = nil) throws
  final public func registerWebAuthn(username: Swift.String, displayName: Swift.String?, completion: TSAuthenticationSDK.TSRegistrationCompletion?)
  final public func authenticateWebAuthn(username: Swift.String, completion: TSAuthenticationSDK.TSAuthenticationCompletion? = nil)
  final public func signWebauthnTransaction(username: Swift.String, completion: TSAuthenticationSDK.TSAuthenticationCompletion? = nil)
  final public func approvalWebAuthn(username: Swift.String, approvalData: [Swift.String : Swift.String], completion: TSAuthenticationSDK.TSApprovalCompletion? = nil)
  final public func registerNativeBiometrics(username: Swift.String, completion: @escaping TSAuthenticationSDK.TSNativeBiometricsRegistrationCompletion)
  final public func authenticateNativeBiometrics(username: Swift.String, challenge: Swift.String, completion: @escaping TSAuthenticationSDK.TSNativeBiometricsAuthenticationCompletion)
  final public func unregistersNativeBiometrics(username: Swift.String, completion: @escaping TSAuthenticationSDK.TSNativeBiometricsUnregisterCompletion)
  final public func registerTOTP(URI: Swift.String, securityType: TSAuthenticationSDK.TSTOTPSecurityType, completion: @escaping TSAuthenticationSDK.TSTOTPRegistrationCompletion)
  final public func generateTOTPCode(UUID: Swift.String, completion: @escaping TSAuthenticationSDK.TSTOTPGenerateCodeCompletion)
  final public func getDeviceInfo(_ completion: @escaping TSAuthenticationSDK.DeviceInfoCompletion)
  public static func isWebAuthnSupported() -> Swift.Bool
  public static func isNativeBiometricsEnrolled() -> Swift.Bool
  @objc deinit
}
public enum TSAuthenticationError : Swift.Error {
  case notInitialized
  case unsupportedOSVersion
  case requestIsRunning
  case networkError
  case webAuthnError(TSAuthenticationSDK.TSWebAuthnError)
  case totpError(TSAuthenticationSDK.TSTOTPError)
  case nativeBiometricsError(TSAuthenticationSDK.TSNativeBiometricsError)
  case `internal`((any Swift.Error)?)
  case initializationError
}
extension TSAuthenticationSDK.TSAuthenticationError : Swift.Equatable {
  public static func == (lhs: TSAuthenticationSDK.TSAuthenticationError, rhs: TSAuthenticationSDK.TSAuthenticationError) -> Swift.Bool
}
public enum TSWebAuthnError {
  case canceled
  case invalidResponse(AuthenticationServices.ASAuthorizationError?)
  case notHandled(AuthenticationServices.ASAuthorizationError?)
  case failed(AuthenticationServices.ASAuthorizationError?)
  case notInteractive(AuthenticationServices.ASAuthorizationError?)
  case invalidDomain
  case invalidWebAuthnSession
  case userNotFound
  case `internal`((any Swift.Error)?)
}
public enum TSTOTPError : Swift.Error {
  case nativeBiometricsNotAvailable
  case incorrectURIFormat
  case notRegistered
  case invalidSecret
  case invalidAlgorithm
  case invalidPeriod
  case invalidDigits
  case `internal`((any Swift.Error)?)
}
extension TSAuthenticationSDK.TSTOTPError : Swift.Equatable {
  public static func == (lhs: TSAuthenticationSDK.TSTOTPError, rhs: TSAuthenticationSDK.TSTOTPError) -> Swift.Bool
}
public enum TSNativeBiometricsError : Swift.Error {
  case nativeBiometricsNotAvailable
  case notRegistered
  case `internal`((any Swift.Error)?)
}
extension TSAuthenticationSDK.TSNativeBiometricsError : Swift.Equatable {
  public static func == (lhs: TSAuthenticationSDK.TSNativeBiometricsError, rhs: TSAuthenticationSDK.TSNativeBiometricsError) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class TSRegistrationResult {
  final public var result: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TSNativeBiometricsRegistrationResult {
  final public let publicKey: Swift.String
  final public let publicKeyId: Swift.String
  final public let attestation: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TSAuthenticationResult {
  final public var result: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TSNativeBiometricsUnregisterResult {
  final public let publicKeyId: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TSNativeBiometricsAuthenticationResult {
  final public let publicKeyId: Swift.String
  final public let signature: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TSTOTPRegistrationResult {
  final public let issuer: Swift.String?
  final public let label: Swift.String?
  final public let uuid: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TSTOTPGenerateCodeResult {
  final public let code: Swift.String
  @objc deinit
}
extension TSAuthenticationSDK.TSAuthentication {
  final public var version: Swift.String? {
    get
  }
  final public var buildNumber: Swift.String? {
    get
  }
}
extension TSAuthenticationSDK.TSTOTPSecurityType : Swift.Equatable {}
extension TSAuthenticationSDK.TSTOTPSecurityType : Swift.Hashable {}
